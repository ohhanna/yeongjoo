Hyper Text
▨  Hyper link를 통해 다른 하이퍼 텍스트와 연결됨
    : 문서와 문서가 연결된 구조
    : 문서는 텍스트 외에 이미지,동영상 등의 멀티미디어 요소 포함    
▨ 웹 브라우저를 이용해 하이퍼텍스트를 볼 수 있음
    : HTML로 표현되며 HTTP프로토콜을 사용하여 전송



static web page
▨ 클라이언트가 서버에게 웹 문서를 요청하면,
     서버는 항상 동일한 결과 전달
    : 정적인 텍스트로 문서의 내용이 바뀌지 않음 
    
    1	<HTML>
    2	  <HEAD>
    3		<TITLE>인덱스 페이지</TITLE>
    4	  </HEAD>
    5	  <BODY>
    6		<h2> INDEX </h2>
    7	  </BODY>
    8	</HTML>



dynamic web page
▨  동적 웹 문서를 사용하여 최종 결과가 동적으로 만들어짐
    : 클라이언트 측 처리와 서버 측 처리 방식이 있음
    : JSP는 동적 웹 문서를 작성하는 기술
    
    1	<%@ page language="java" contentType="text/html;charset=UTF-8" %>
    2	<HTML>
    3	  <HEAD>
    4		 <TITLE>인덱스 페이지</TITLE>
    5	  </HEAD>
    6	  <BODY>
    7	     <h2> INDEX </h2>
    7	     지금 시각은  <% out.print(new java.util.Date( )); %>
    8	  </BODY>
    9	</HTML>



Web Application
▨  웹에서 실행되는 응용 프로그램
    : 웹 브라우저(클라이언트)가 웹 서비스를 요청하면 결과를 제공



웹 서비스의 제공과 구성 요소
▨  Web Server
    : 클라이언트의 요청을 처리하도록 프로세스를 관리
    : 요청을 처리한 결과를 클라이언트에 보냄   
▨ Web Application Server 
    : 웹 어플리케이션의 실행 환경
    : JSP프로그램을 실행시키고 결과를 웹 서버에 전달    
▨ Database
    : 웹 서비스 수행에 필요한 데이터를 저장하고 제공



웹 어플리케이션의 실행 위치
▨ 클라이언트 측 실행
    : 웹 문서에 동적 요소를 포함시켜 클라이언트에 전송
    : 웹 브라우저가 해석하여 페이지를 생성
       > 애플릿, JavaScript, 플래시 등
    : 보안의 문제
▨ 서버 측 실행
    : 서버가 응답 문서를 동적으로 생성하여 클라이언트에 전송
       > 웹 어플리케이션 서버가 수행한 결과가 브라우저에 전송됨
    : Java 서블릿, JSP, CGI, ASP, PHP 등
    : 서버의 부담



웹 어플리케이션의 실행 방식
▨ 컴파일 방식
    : 실행 파일이나 바이트 코드가 만들어져 사용되는 방식
      > Perl, C, C++, Java 서블릿, JSP      
▨ 비컴파일 방식
    : 매 요청마다 스크립트를 해석하여 실행하는 방식
      > JavaScript는 클라이언트 측 스크립트 언어



CGI ; Common Gateway Interface
▨ 동적으로 웹 페이지를 생성하기 위한 방식 중 하나
    : 고급 언어 프로그램을 실행시켜 HTML코드를 생성한 후 전달함    
▨ 클라이언트의 요청이 있으면 해당 프로그램을 실행시키기 위해
    개별 프로세스를 생성
    > 동일한 CGI를 요청해도 요청 개수만큼 프로세스를 생성하므로
      웹 서버에 부하를 줌



WAS ; Web Application Server
▨ 웹 어플리케이션을 실행하고 관리하는 별도의 전담 프로그램
    : 모든 요청에 대해 매번 프로세스를 생성하지 않고 
      하나의 자바 가상 머신 내에서 수행     
▨ 요청을 처리하기 위해 멀티 스레드 사용
▨ 웹 페이지 생성 외에도 많은 기능을 수행함
    : API 제공, 부하 균형, 고장 조치 등



Web Server vs. Web Application Server
▨ Web Server 
    : 클라이언트로부터의 요청을 받고 결과를 전달하는 기능
      > Apache HTTP Server, IIS, Nginx    
    :  HTTP 프로토콜을 사용하여 클라이언트와 통신함
      > HTTP는 클라이언트와 웹서버 간 웹문서를 전송하기 위한 통신규약
      > 웹 서버를 HTTP서버라고 함    
    : 웹 서버의 구체적 기능
      > 클라이언트가 요청한 웹 문서를 찾아 전달
      > 문제가 있으면 정해진 코드 값으로 응답
      > 클라이언트 요청에 대한 기본적 사용자 인증 처리
      > 프로그램 실행 요청이 있으면 처리 후 그 결과 전달           
▨ Web Application Server 
    : 서버의 성능을 개선하기 위해 웹 서버의 기능을 분리
    : 웹서비스의 처리를 위해 동적 페이지를 만들거나 비즈니스 로직을 처리  



Servlet ; Server + Let
▨ server side java program
▨ Java 언어에 기초한 웹 프로그램의 개발 기술
▨ java 언어로 서블릿 클래스를 만들고, 
   컴파일된 바이트 코드를 서버에 탑재하여 웹 서비스를 제공
    : 소스를 수정하면 다시 컴파일하여 서버에 탑재해야 함
    
	1   public class HelloServlet extends HttpServlet {
	2	 public void doGet(HttpServletRequest request, HttpServletResponse response)
	3		throws ServletException, IOException {
	4		response.setContentType("text/html; charset=UTF-8");
	5		java.io.PrintWriter out = response.getWriter();
	6		out.println("<HTML><HEAD><TITLE>로그인</TITLE></HEAD>");
	7		out.println("<BODY><H2>헬로 서블릿</H2>");
	8		out.println("오늘의 날짜와 시간은 : " + new java.util.Date( ));
	9		out.println("</BODY></HTML>");
	10	 }
	11  }



JSP ; Java Server Pages
▨  서블릿을 서버 측 스크립트로 구성한 언어
▨  HTML 페이지 내에 JSP 페이지를 삽입하면 서블릿으로 변환됨
    : 웹 어플리케이션 서버가 자동으로 JSP 페이지로 변환하고
     컴파일하여 웹 서비스를 제공함
    : J2EE를 구성하는 기술 중의 하나    
▨  특징
    : 스크립트 언어로 HTML 페이지에 삽입됨
    : Java 언어의 특성을 활용
      > JSP기술은 플랫폼에 독립적
    : 표현 언어, 표현식, 액션 태그 등의 스크립트적 요소 제공
    : 다양한 개발 환경이 오픈 소스로 제공됨



Servlet Container
▨ 클라이언트의 서블릿 요청을 실행시키는 역할
    : Java로 구현된 서블릿 엔진
    : Tomcat, WebLogic, WebSphere 등



JSP Container
▨ JSP를 서블릿으로 변환하는 기능의 프로그램
    : 대부분의 서블릿 컨테이너와 WAS들은 JSP 컨테이너를 포함
    : JSP 컨테이너 자체는 서블릿으로 구현되어 있으며
     서블릿 컨테이너에 의해 실행됨



Web Container
▨ 서블릿이 실행되기 위해 필요한 주변 환경
    : 웹 서버(예:Apache)
    : 자바 실행 환경
    : 서블릿 컨테이너(예:Tomcat)
      > 웹 컨테이너 = 서블릿 컨테이너 + JSP 컨테이너



HTTP
▨ TCP에 기초한 어플리케이션 계층 프로토콜
   : 웹 서비스를 위해 웹 서버와 클라이언트가 통신하는 규약
▨ 특징
   Connection oriented & Stateless
   : 요청을 위해 접속을 해야 함
   : 서버가 응답한 후에 서버는 클라이언트의 상태를 유지하지 않음
   : 웹 서버의 부담을 줄이거나 상태 관리를 위해 쿠키나 세션 등이 필요   
   HTTP 요청과 응답 형식의 통신
   : 연결 설정, 요청 메시지 전송, 응답 메시지 전송, 연결 끊기



이클립스를 이용한 웹 프로그램 개발 및 배포
▨ 개발
   : Tomcat을 Server로 등록
   : 동적 웹 프로젝트(Dynamic WebProject)를 생성
   : 서블릿 또는 JSP 페이지 작성
   : 서블릿 또는 JSP 페이지 실행   
▨ 배포
   : 실제 서비스를 위해 웹 프로젝트를 war 파일 형태로 톰캣에 배포



WAR file ; Web Application aRchive file
▨ war 파일
   : 웹 프로젝트를 압축한 파일
   : 웹 어플리케이션을 웹 서버에 내보내기 위해 WAR 파일 사용
   : HTML페이지, JSP페이지, 서블릿, 리소스와 소스 파일 등
   : 웹 서비스 제공을 위한 폴더 구조를 가짐   
▨ Eclipse와 서블릿 표준 규약에서의 웹 프로젝트 디렉터리 구조가 상이
   : 클래스 파일의 위치
     Eclipse에서는 [웹프로젝트폴더]\build\classes\,
     톰캣에서는 [웹프로젝트폴더]\WEB-INF\classes\에 저장됨



web.xml
- Web Application의 Deployment Descriptor(배포서술자)로서 XML 형식의 파일로
  web.xml 파일의 설정들은 Web Application 시작시 메모리에 로딩된다.

url-pattern
- 서블릿을 사용하면 주소가 경로에 뜰 때, 보안상 좋지 않아서 다른 특정한 단어로 매핑해준다.

URL Mapping
- URL 경로가 너무 길고, 보안에 노출되어 있어서 이러한 경로를 간단하게 표현하는 것

Servlet Context
- web application 내에 있는 모든 서블릿들을 관리하며 정보공유할 수 있게 도와주는 역할을 하는 것

