<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 접근 권한 메시지 핸들러 지정 위해 bean을 직접 만들어서 넣어준다. -->
	<bean id="customAccessDenied" class="edu.springz.security.CustomAccessDeniedHandler"/>
	<!-- 로그인 성공 핸들러 빈 -->
<!-- 	<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"/> -->
	
	<bean id="customUserDetailsService" class="edu.springz.security.CustomUserDetailsService"/>
	
<!-- 	<bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"/> -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	

	<security:http>
		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
<!-- 	   <security:form-login login-page="/customLogin"/> -->
<!-- 		<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess"/> -->

		<security:form-login login-page="/customLogin"/>
		
	   	<!-- 접근 권한 메시지 핸들러 지정 : error-page 만들어서 설정하거나, Handler 만들어서 설정할 수 있다. -->
<!-- 	   <security:access-denied-handler error-page="/accessError"/> -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 로그아웃 처리 - 쿠키삭제까지 -->
		<security:logout logout-url="/customLogout" invalidate-session="true" 
												delete-cookies="remember-me,JSESSION_ID"/>
		
		<!-- DB를 이용한 자동 로그인 지정 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800" />
		
		
		<!-- csrf 비활성화 -->
<!-- 		<security:csrf disabled="true"/> -->
	</security:http>
	
	<!-- 가장 중요한 역할을 하는존재가 인증을 담당하는 authentication-manager -->
	<security:authentication-manager>
	<!-- 실제 인증 작업을 진행한다 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
		
<!-- 			<security:user-service> -->
<!-- 				<security:user name="member" password="{noop}1111" authorities="ROLE_MEMBER"/> -->
<!-- 				<security:user name="admin" password="{noop}1111" authorities="ROLE_ADMIN, ROLE_MEMBER"/> -->
<!-- 			</security:user-service> -->

				<!-- DB에서 쿼리를 가져와서 쓴다 -->
<!-- 			<security:jdbc-user-service  -->
<!-- 				data-source-ref="dataSource" -->
<!-- 				users-by-username-query="SELECT userid, userpw, enabled FROM tbl_member WHERE userid=?"  -->
<!-- 				authorities-by-username-query="SELECT userid, auth FROM tbl_member_auth WHERE userid=?" /> -->
<!-- 			<security:password-encoder ref="customPasswordEncoder"/> -->
			
			<security:password-encoder ref="bcryptPasswordEncoder"/>
			
		</security:authentication-provider>
	</security:authentication-manager>
	

</beans>